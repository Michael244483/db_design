{
  "name": "树形结构数据库设计",
  "tagline": "",
  "body": "#邻接表:依赖父节点\r\n邻接表的方案如下(仅仅说明问题)\r\n\r\n#路径枚举\r\n路径枚举的设计是指通过将所有祖先的信息联合成一个字符串，并保存为每个节点的一个属性。\r\n\r\n#闭包表\r\n闭包表是解决分层存储一个简单而又优雅的解决方案，它记录了表中所有的节点关系，并不仅仅是直接的父子关系。\r\n\r\n1.邻接表是最方便的设计，并且很多软件开发者都了解它。并且在递归查询的帮助下，使得邻接表的查询更加高效。\r\n2.枚举路径能够很直观地展示出祖先到后代之间的路径，但由于不能确保引用完整性，使得这个设计比较脆弱。枚举路径也使得数据的存储变得冗余。\r\n3.嵌套集是一个聪明的解决方案，但不能确保引用完整性，并且只能使用于查询性能要求较高，而其他要求一般的场合使用它。\r\n4.闭包表是最通用的设计，并且最灵活，易扩展，并且一个节点能属于多棵树，能减少冗余的计算时间。但它要求一张额外的表来存储关系，是一个空间换取时间的方案。",
  "note": "Don't delete this file! It's used internally to help with page regeneration."
}